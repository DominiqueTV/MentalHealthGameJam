using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace ETS.Realtime
{
    [RealtimeModel]
    public partial class ButtonModel
    {
        [RealtimeProperty(1, true)] private bool _isPressed;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace ETS.Realtime {
    public partial class ButtonModel : RealtimeModel {
        public bool isPressed {
            get {
                return _isPressedProperty.value;
            }
            set {
                if (_isPressedProperty.value == value) return;
                _isPressedProperty.value = value;
                InvalidateReliableLength();
            }
        }
        
        public enum PropertyID : uint {
            IsPressed = 2,
        }
        
        #region Properties
        
        private ReliableProperty<bool> _isPressedProperty;
        
        #endregion
        
        public ButtonModel() : base(null) {
            _isPressedProperty = new ReliableProperty<bool>(2, _isPressed);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _isPressedProperty.UnsubscribeCallback();
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _isPressedProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _isPressedProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.IsPressed: {
                        changed = _isPressedProperty.Read(stream, context);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _isPressed = isPressed;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
